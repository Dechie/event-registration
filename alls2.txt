import 'package:event_reg/core/network/dio_client.dart';
import 'package:event_reg/features/registration/data/models/participant.dart';
import 'package:event_reg/features/registration/data/models/registration_result.dart';

abstract class RegistrationRemoteDataSource {
  Future<void> sendOTP(String email);
  Future<bool> verifyOTP(String email, String otp);
  Future<RegistrationResult> registerParticipant(Participant participant);
  Future<Participant?> getParticipantByEmail(String email);
  Future<List<Participant>> getAllParticipants();
}

class RegistrationRemoteDataSourceImpl implements RegistrationRemoteDataSource {
  final DioClient dioClient;

  RegistrationRemoteDataSourceImpl({required this.dioClient});

  @override
  Future<void> sendOTP(String email) async {
    try {
      await dioClient.post('/auth/send-otp', data: {'email': email});
    } catch (e) {
      throw Exception('Failed to send OTP: ${e.toString()}');
    }
  }

  @override
  Future<bool> verifyOTP(String email, String otp) async {
    try {
      final response = await dioClient.post(
        '/auth/verify-otp',
        data: {'email': email, 'otp': otp},
      );

      return response.data['success'] == true;
    } catch (e) {
      throw Exception('Failed to verify OTP: ${e.toString()}');
    }
  }

  @override
  Future<RegistrationResult> registerParticipant(
    Participant participant,
  ) async {
    try {
      final response = await dioClient.post(
        '/participants',
        data: participant.toJson(),
      );

      final participantData = response.data['participant'];
      final qrCode = response.data['qrCode'];

      return RegistrationResult(
        participant: Participant.fromJson(participantData),
        qrCode: qrCode,
      );
    } catch (e) {
      throw Exception('Failed to register participant: ${e.toString()}');
    }
  }

  @override
  Future<Participant?> getParticipantByEmail(String email) async {
    try {
      final response = await dioClient.get(
        '/participants/by-email',
        queryParams: {'email': email},
      );

      if (response.data != null) {
        return Participant.fromJson(response.data);
      }
      return null;
    } catch (e) {
      throw Exception('Failed to get participant: ${e.toString()}');
    }
  }

  @override
  Future<List<Participant>> getAllParticipants() async {
    try {
      final response = await dioClient.get('/participants');

      final List<dynamic> participantsJson = response.data['participants'];
      return participantsJson
          .map((json) => Participant.fromJson(json))
          .toList();
    } catch (e) {
      throw Exception('Failed to get participants: ${e.toString()}');
    }
  }
}
import 'package:event_reg/core/network/network_info.dart';
import 'package:event_reg/features/registration/data/datasources/registratoin_local_datasource.dart';
import 'package:event_reg/features/registration/data/models/registration_result.dart';

import '../datasources/registration_remote_datasource.dart';
import '../models/participant.dart';

abstract class RegistrationRepository {
  Future<List<Participant>> getAllParticipants();
  Future<Participant?> getParticipantByEmail(String email);
  Future<RegistrationResult> registerParticipant(Participant participant);
  Future<void> sendOTP(String email);
  Future<bool> verifyOTP(String email, String otp);
}

class RegistrationRepositoryImpl implements RegistrationRepository {
  final RegistrationRemoteDataSource remoteDataSource;
  final RegistrationLocalDataSource localDataSource;
  final NetworkInfo networkInfo;

  RegistrationRepositoryImpl({
    required this.remoteDataSource,
    required this.localDataSource,
    required this.networkInfo,
  });

  @override
  Future<List<Participant>> getAllParticipants() async {
    if (await networkInfo.isConnected) {
      try {
        final participants = await remoteDataSource.getAllParticipants();

        // Cache all participants
        for (final participant in participants) {
          await localDataSource.cacheParticipant(participant);
        }

        return participants;
      } catch (e) {
        // Fallback to cached data
        return await localDataSource.getAllCachedParticipants();
      }
    } else {
      return await localDataSource.getAllCachedParticipants();
    }
  }

  @override
  Future<Participant?> getParticipantByEmail(String email) async {
    try {
      // Try local cache first
      final cachedParticipant = await localDataSource.getParticipantByEmail(
        email,
      );
      if (cachedParticipant != null) {
        return cachedParticipant;
      }

      // If not in cache and connected, try remote
      if (await networkInfo.isConnected) {
        final participant = await remoteDataSource.getParticipantByEmail(email);
        if (participant != null) {
          await localDataSource.cacheParticipant(participant);
        }
        return participant;
      }

      return null;
    } catch (e) {
      throw Exception('Failed to get participant: ${e.toString()}');
    }
  }

  @override
  Future<RegistrationResult> registerParticipant(
    Participant participant,
  ) async {
    if (await networkInfo.isConnected) {
      try {
        final result = await remoteDataSource.registerParticipant(participant);

        // Cache the participant locally
        await localDataSource.cacheParticipant(result.participant);

        return result;
      } catch (e) {
        throw Exception('Failed to register participant: ${e.toString()}');
      }
    } else {
      // Store locally and sync later
      await localDataSource.cacheParticipant(participant);
      throw Exception('No internet connection. Registration saved locally.');
    }
  }

  @override
  Future<void> sendOTP(String email) async {
    if (await networkInfo.isConnected) {
      try {
        await remoteDataSource.sendOTP(email);
        // Cache the email for offline verification if needed
        await localDataSource.cacheEmail(email);
      } catch (e) {
        throw Exception('Failed to send OTP: ${e.toString()}');
      }
    } else {
      throw Exception('No internet connection');
    }
  }

  @override
  Future<bool> verifyOTP(String email, String otp) async {
    if (await networkInfo.isConnected) {
      try {
        return await remoteDataSource.verifyOTP(email, otp);
      } catch (e) {
        throw Exception('Failed to verify OTP: ${e.toString()}');
      }
    } else {
      throw Exception('No internet connection');
    }
  }
}
import 'package:event_reg/features/registration/data/models/participant.dart';
import 'package:event_reg/features/registration/data/repositories/registration_repository.dart';
import 'package:event_reg/features/registration/presentation/bloc/registration_event.dart';
import 'package:event_reg/features/registration/presentation/bloc/registration_state.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class RegistrationBloc extends Bloc<RegistrationEvent, RegistrationState> {
  final RegistrationRepository repository;

  RegistrationBloc({required this.repository}) : super(RegistrationInitial()) {
    on<SendOTPEvent>(_onSendOTP);
    on<VerifyOTPEvent>(_onVerifyOTP);
    on<RegisterParticipantEvent>(_onRegisterParticipant);
    on<ResetRegistrationEvent>(_onResetRegistration);
  }

  Future<void> _onSendOTP(
    SendOTPEvent event,
    Emitter<RegistrationState> emit,
  ) async {
    emit(RegistrationLoading());

    try {
      await repository.sendOTP(event.email);
      emit(OTPSentState(email: event.email));
    } catch (e) {
      emit(RegistrationErrorState(message: e.toString()));
    }
  }

  Future<void> _onVerifyOTP(
    VerifyOTPEvent event,
    Emitter<RegistrationState> emit,
  ) async {
    emit(RegistrationLoading());

    try {
      final isValid = await repository.verifyOTP(event.email, event.otp);
      if (isValid) {
        emit(OTPVerifiedState());
      } else {
        emit(RegistrationErrorState(message: 'Invalid OTP. Please try again.'));
      }
    } catch (e) {
      emit(RegistrationErrorState(message: e.toString()));
    }
  }

  Future<void> _onRegisterParticipant(
    RegisterParticipantEvent event,
    Emitter<RegistrationState> emit,
  ) async {
    emit(RegistrationLoading());

    try {
      final participant = Participant(
        id: '', // Will be generated by backend
        fullName: event.fullName,
        gender: event.gender,
        dateOfBirth: event.dateOfBirth,
        nationality: event.nationality,
        phoneNumber: event.phoneNumber,
        email: event.email,
        region: event.region,
        city: event.city,
        woreda: event.woreda,
        idNumber: event.idNumber,
        occupation: event.occupation,
        organization: event.organization,
        department: event.department,
        industry: event.industry,
        yearsOfExperience: event.yearsOfExperience,
        photoUrl: event.photoPath,
        selectedSessions: event.selectedSessions,
        createdAt: DateTime.now(),
      );

      final result = await repository.registerParticipant(participant);

      emit(
        RegistrationSuccessState(
          participant: result.participant,
          qrCode: result.qrCode,
        ),
      );
    } catch (e) {
      emit(RegistrationErrorState(message: e.toString()));
    }
  }

  Future<void> _onResetRegistration(
    ResetRegistrationEvent event,
    Emitter<RegistrationState> emit,
  ) async {
    emit(RegistrationInitial());
  }
}
class RegisterParticipantEvent extends RegistrationEvent {
  final String fullName;
  final String? gender;
  final DateTime? dateOfBirth;
  final String? nationality;
  final String phoneNumber;
  final String email;
  final String? region;
  final String? city;
  final String? woreda;
  final String? idNumber;
  final String occupation;
  final String organization;
  final String? department;
  final String industry;
  final int? yearsOfExperience;
  final String? photoPath;
  final List<String> selectedSessions;

  RegisterParticipantEvent({
    required this.fullName,
    this.gender,
    this.dateOfBirth,
    this.nationality,
    required this.phoneNumber,
    required this.email,
    this.region,
    this.city,
    this.woreda,
    this.idNumber,
    required this.occupation,
    required this.organization,
    this.department,
    required this.industry,
    this.yearsOfExperience,
    this.photoPath,
    required this.selectedSessions,
  });
}

abstract class RegistrationEvent {}

class ResetRegistrationEvent extends RegistrationEvent {}

class SendOTPEvent extends RegistrationEvent {
  final String email;

  SendOTPEvent({required this.email});
}

class VerifyOTPEvent extends RegistrationEvent {
  final String email;
  final String otp;

  VerifyOTPEvent({required this.email, required this.otp});
}
import 'package:event_reg/features/registration/data/models/participant.dart';

abstract class RegistrationState {}

class RegistrationInitial extends RegistrationState {}

class RegistrationLoading extends RegistrationState {}

class OTPSentState extends RegistrationState {
  final String email;

  OTPSentState({required this.email});
}

class OTPVerifiedState extends RegistrationState {}

class RegistrationSuccessState extends RegistrationState {
  final Participant participant;
  final String qrCode;

  RegistrationSuccessState({required this.participant, required this.qrCode});
}

class RegistrationErrorState extends RegistrationState {
  final String message;

  RegistrationErrorState({required this.message});
}
class Participant {
  final String id;
  final String fullName;
  final String? gender;
  final DateTime? dateOfBirth;
  final String? nationality;
  final String phoneNumber;
  final String email;
  final String? region;
  final String? city;
  final String? woreda;
  final String? idNumber;
  final String occupation;
  final String organization;
  final String? department;
  final String industry;
  final int? yearsOfExperience;
  final String? photoUrl;
  final List<String> selectedSessions;
  final DateTime createdAt;

  const Participant({
    required this.id,
    required this.fullName,
    this.gender,
    this.dateOfBirth,
    this.nationality,
    required this.phoneNumber,
    required this.email,
    this.region,
    this.city,
    this.woreda,
    this.idNumber,
    required this.occupation,
    required this.organization,
    this.department,
    required this.industry,
    this.yearsOfExperience,
    this.photoUrl,
    required this.selectedSessions,
    required this.createdAt,
  });

  // Factory constructor for JSON deserialization
  factory Participant.fromJson(Map<String, dynamic> json) {
    return Participant(
      id: json['id'] as String,
      fullName: json['fullName'] as String,
      gender: json['gender'] as String?,
      dateOfBirth: json['dateOfBirth'] != null
          ? DateTime.parse(json['dateOfBirth'] as String)
          : null,
      nationality: json['nationality'] as String?,
      phoneNumber: json['phoneNumber'] as String,
      email: json['email'] as String,
      region: json['region'] as String?,
      city: json['city'] as String?,
      woreda: json['woreda'] as String?,
      idNumber: json['idNumber'] as String?,
      occupation: json['occupation'] as String,
      organization: json['organization'] as String,
      department: json['department'] as String?,
      industry: json['industry'] as String,
      yearsOfExperience: json['yearsOfExperience'] as int?,
      photoUrl: json['photoUrl'] as String?,
      selectedSessions: List<String>.from(json['selectedSessions'] as List),
      createdAt: DateTime.parse(json['createdAt'] as String),
    );
  }

  // Method for JSON serialization
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'fullName': fullName,
      'gender': gender,
      'dateOfBirth': dateOfBirth?.toIso8601String(),
      'nationality': nationality,
      'phoneNumber': phoneNumber,
      'email': email,
      'region': region,
      'city': city,
      'woreda': woreda,
      'idNumber': idNumber,
      'occupation': occupation,
      'organization': organization,
      'department': department,
      'industry': industry,
      'yearsOfExperience': yearsOfExperience,
      'photoUrl': photoUrl,
      'selectedSessions': selectedSessions,
      'createdAt': createdAt.toIso8601String(),
    };
  }

  // CopyWith method for immutable updates
  Participant copyWith({
    String? id,
    String? fullName,
    String? gender,
    DateTime? dateOfBirth,
    String? nationality,
    String? phoneNumber,
    String? email,
    String? region,
    String? city,
    String? woreda,
    String? idNumber,
    String? occupation,
    String? organization,
    String? department,
    String? industry,
    int? yearsOfExperience,
    String? photoUrl,
    List<String>? selectedSessions,
    DateTime? createdAt,
  }) {
    return Participant(
      id: id ?? this.id,
      fullName: fullName ?? this.fullName,
      gender: gender ?? this.gender,
      dateOfBirth: dateOfBirth ?? this.dateOfBirth,
      nationality: nationality ?? this.nationality,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      email: email ?? this.email,
      region: region ?? this.region,
      city: city ?? this.city,
      woreda: woreda ?? this.woreda,
      idNumber: idNumber ?? this.idNumber,
      occupation: occupation ?? this.occupation,
      organization: organization ?? this.organization,
      department: department ?? this.department,
      industry: industry ?? this.industry,
      yearsOfExperience: yearsOfExperience ?? this.yearsOfExperience,
      photoUrl: photoUrl ?? this.photoUrl,
      selectedSessions: selectedSessions ?? this.selectedSessions,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Participant &&
        other.id == id &&
        other.fullName == fullName &&
        other.email == email;
  }

  @override
  int get hashCode => id.hashCode ^ fullName.hashCode ^ email.hashCode;

  @override
  String toString() {
    return 'Participant(id: $id, fullName: $fullName, email: $email)';
  }
}
