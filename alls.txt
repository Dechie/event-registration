lib
├── app.dart
├── config
│   ├── app_config.dart
│   ├── routes
│   │   ├── app_router.dart
│   │   └── route_names.dart
│   └── themes
│       ├── app_colors.dart
│       └── app_theme.dart
├── core
│   ├── constants
│   │   ├── app_constants.dart
│   │   └── app_urls.dart
│   ├── error
│   │   ├── exceptions.dart
│   │   └── failures.dart
│   ├── network
│   │   ├── dio_client.dart
│   │   └── network_info.dart
│   ├── utils
│   │   ├── date_utils.dart
│   │   ├── file_utils.dart
│   │   └── validators.dart
│   └── widgets
│       ├── custom_button.dart
│       ├── custom_text_field.dart
│       ├── error_widget.dart
│       └── loading_widget.dart
├── features
│   ├── dashboard
│   │   └── lib
│   │       └── features
│   │           └── dashboard
│   │               ├── data
│   │               │   ├── datasource
│   │               │   │   └── dashboard_datasource.dart
│   │               │   ├── models
│   │               │   └── repositories
│   │               │       └── dashboard_repository.dart
│   │               └── presentation
│   │                   ├── bloc
│   │                   │   ├── dashboard_bloc.dart
│   │                   │   ├── dashboard_event.dart
│   │                   │   └── dashboard_state.dart
│   │                   ├── pages
│   │                   │   └── dashboard_page.dart
│   │                   └── widgets
│   └── registration
│       ├── data
│       │   ├── datasources
│       │   │   ├── registration_remote_datasource.dart
│       │   │   └── registratoin_local_datasource.dart
│       │   ├── models
│       │   │   ├── participant.dart
│       │   │   ├── registration_request.dart
│       │   │   ├── registration_response.dart
│       │   │   └── registration_result.dart
│       │   └── repositories
│       │       └── registration_repository.dart
│       └── presentation
│           ├── bloc
│           │   ├── registration_bloc.dart
│           │   ├── registration_event.dart
│           │   └── registration_state.dart
│           ├── pages
│           │   ├── otp_verification_page.dart
│           │   ├── registration_page.dart
│           │   └── registration_success_page.dart
│           └── widgets
│               ├── personal_info_form.dart
│               ├── photo_upload_widget.dart
│               ├── professional_info_form.dart
│               └── session_selection.dart
├── injection_container.dart
└── main.dart

32 directories, 44 files
import 'package:event_reg/features/registration/data/datasources/registratoin_local_datasource.dart';
import 'package:event_reg/features/registration/data/repositories/registration_repository.dart';
import 'package:get_it/get_it.dart';
import 'package:dio/dio.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'core/network/dio_client.dart';
import 'core/network/network_info.dart';

import 'features/registration/data/datasources/registration_remote_datasource.dart';
import 'features/registration/presentation/bloc/registration_bloc.dart';

final GetIt sl = GetIt.instance;

Future<void> init() async {
  // ! Features - Registration
  // Bloc
  sl.registerFactory(() => RegistrationBloc(repository: sl()));

  // Repository
  sl.registerLazySingleton<RegistrationRepository>(
    () => RegistrationRepositoryImpl(
      remoteDataSource: sl(),
      localDataSource: sl(),
      networkInfo: sl(),
    ),
  );

  // DataSources
  sl.registerLazySingleton<RegistrationRemoteDataSource>(
    () => RegistrationRemoteDataSourceImpl(dioClient: sl()),
  );

  sl.registerLazySingleton<RegistrationLocalDataSource>(
    () => RegistrationLocalDataSourceImpl(sharedPreferences: sl()),
  );

  // ! Core
  sl.registerLazySingleton<NetworkInfo>(() => NetworkInfoImpl(sl()));

  sl.registerLazySingleton<DioClient>(() => DioClient(sl()));

  // ! External
  sl.registerLazySingleton(() => Dio());
  sl.registerLazySingleton(() => InternetConnectionChecker.createInstance());

  // Shared Preferences
  final sharedPrefs = await SharedPreferences.getInstance();
  sl.registerLazySingleton(() => sharedPrefs);
}
import 'package:event_reg/config/routes/route_names.dart';
import 'package:event_reg/features/registration/presentation/bloc/registration_bloc.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'config/routes/app_router.dart';
import 'config/themes/app_theme.dart';
import 'injection_container.dart' as di;

class EventRegistrationApp extends StatelessWidget {
  const EventRegistrationApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [BlocProvider(create: (_) => di.sl<RegistrationBloc>())],
      child: MaterialApp(
        title: "Event Registration",
        theme: AppTheme.lightTheme,
        darkTheme: AppTheme.darkTheme,
        onGenerateRoute: AppRouter.generateRoute,
        initialRoute: RouteNames.registrationPage,
      ),
    );
  }
}
import 'package:flutter/material.dart';

import 'app.dart';
import 'injection_container.dart' as di;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await di.init();
  runApp(const EventRegistrationApp());
}
import 'package:dio/dio.dart';
import 'package:flutter/material.dart' show debugPrint;

import '../constants/app_urls.dart';

class ApiError implements Exception {
  final String message;
  final int? statusCode;

  ApiError(this.message, {this.statusCode});

  @override
  String toString() => message;
}

class DioClient {
  late final Dio dio;

  DioClient(Dio dioInstance) {
    dio = dioInstance;

    // Configure base options
    dio.options = BaseOptions(
      baseUrl: AppUrls.baseUrl,
      connectTimeout: const Duration(seconds: 30),
      receiveTimeout: const Duration(seconds: 30),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    );

    // Add Interceptors for authentication
    dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          if (options.extra["token"] != null) {
            final token = options.extra["token"];
            options.headers["Authorization"] = "Bearer $token";
          }
          return handler.next(options);
        },
        onError: (DioException e, handler) {
          if (e.response?.statusCode == 401) {
            debugPrint("Unauthorized! Token might be expired.");
            // Handle token refresh if needed
          }
          return handler.next(e);
        },
      ),
    );

    // Add logging interceptor
    dio.interceptors.add(
      LogInterceptor(
        request: true,
        requestBody: true,
        responseBody: true,
        error: true,
      ),
    );
  }

  Future<Response> delete(String path, {String? token}) async {
    try {
      return await dio.delete(path, options: Options(extra: {"token": token}));
    } on DioException catch (e) {
      throw _handleDioError(e);
    } catch (e) {
      throw ApiError("Unexpected error: ${e.toString()}");
    }
  }

  Future<Response> get(
    String path, {
    Map<String, dynamic>? queryParams,
    String? token,
  }) async {
    try {
      return await dio.get(
        path,
        queryParameters: queryParams,
        options: Options(extra: {"token": token}),
      );
    } on DioException catch (e) {
      throw _handleDioError(e);
    } catch (e) {
      throw ApiError("Unexpected error: ${e.toString()}");
    }
  }

  Future<Response> post(String path, {dynamic data, String? token}) async {
    try {
      return await dio.post(
        path,
        data: data, // Remove jsonEncode here as Dio handles it
        options: Options(extra: {"token": token}),
      );
    } on DioException catch (e) {
      throw _handleDioError(e);
    } catch (e) {
      throw ApiError("Unexpected error: ${e.toString()}");
    }
  }

  Future<Response> put(String path, {dynamic data, String? token}) async {
    try {
      return await dio.put(
        path,
        data: data,
        options: Options(extra: {"token": token}),
      );
    } on DioException catch (e) {
      throw _handleDioError(e);
    } catch (e) {
      throw ApiError("Unexpected error: ${e.toString()}");
    }
  }

  // Handle Dio errors
  ApiError _handleDioError(DioException error) {
    // Handle case where API returns message for failures
    if (error.response != null) {
      if (error.response!.data is Map<String, dynamic>) {
        return ApiError(
          error.response!.data["message"] ?? "An unknown error occurred!",
          statusCode: error.response!.statusCode,
        );
      } else if (error.response!.data is String) {
        return ApiError(
          error.response!.data,
          statusCode: error.response!.statusCode,
        );
      }
    }

    switch (error.type) {
      case DioExceptionType.connectionTimeout:
        return ApiError("Connection timed out!", statusCode: 408);
      case DioExceptionType.sendTimeout:
        return ApiError("Request send timed out!", statusCode: 408);
      case DioExceptionType.receiveTimeout:
        return ApiError("Response receive timed out!", statusCode: 408);
      case DioExceptionType.badResponse:
        return ApiError(
          "Received an invalid response: ${error.response?.statusCode}",
          statusCode: error.response?.statusCode,
        );
      case DioExceptionType.cancel:
        return ApiError("Request was cancelled!");
      case DioExceptionType.unknown:
      default:
        return ApiError("Something went wrong!", statusCode: 500);
    }
  }
}
